/**
 * Python plugin for Orthanc
 * Copyright (C) 2017-2020 Osimis S.A., Belgium
 *
 * This program is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License
 * as published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 **/


typedef struct 
{
  PyObject_HEAD

  /* Type-specific fields go here. */
  {{class_name}}* object_;
  bool borrowed_;
} sdk_{{class_name}}_Object;



// Forward declaration of the methods
{{#methods}}
static PyObject *sdk_{{class_name}}_{{c_function}}(
  sdk_{{class_name}}_Object* self, PyObject *args);
{{/methods}}


static PyMethodDef sdk_{{class_name}}_Methods[] = {
{{#methods}}
  { "{{short_name}}",
    (PyCFunction) sdk_{{class_name}}_{{c_function}}, METH_VARARGS,
    "Generated from C function {{c_function}}()" },
{{/methods}}
  { NULL }  /* Sentinel */
};


static int sdk_{{class_name}}_Constructor(
  sdk_{{class_name}}_Object *self, PyObject *args, PyObject *kwds)
{
  PythonLock::LogCall("Creating Python object of class {{class_name}}");

  self->object_ = NULL;
  self->borrowed_ = false;
  
  long long object = 0;
  unsigned char borrowed = false;
  
  if (PyArg_ParseTuple(args, "Lb", &object, &borrowed))
  {
    self->object_ = reinterpret_cast<{{class_name}}*>(static_cast<intptr_t>(object));
    self->borrowed_ = borrowed;
    return 0;
  }
  else
  {
    PyErr_SetString(PyExc_ValueError, "Expected a pair (pointer, borrowed) in the constructor");
    return -1;
  }
}


/**
 * Static global structure => the fields that are beyond the last
 * initialized field are set to zero.
 * https://stackoverflow.com/a/11152199/881731
 **/
static PyTypeObject sdk_{{class_name}}_Type = {
  PyVarObject_HEAD_INIT(NULL, 0)
  "orthanc.{{short_name}}",    /* tp_name */
  sizeof(sdk_{{class_name}}_Object), /* tp_basicsize */
};


{{#destructor}}
static void sdk_{{class_name}}_Destructor(PyObject *self)
{
  PythonLock::LogCall("Destroying Python object of class {{class_name}}");

  sdk_{{class_name}}_Object& tmp = *((sdk_{{class_name}}_Object*) self);
  
  if (tmp.object_ != NULL &&
      !tmp.borrowed_)
  {
    {{destructor}}(OrthancPlugins::GetGlobalContext(), tmp.object_);
    tmp.object_ = NULL;
  }
  
  Py_TYPE(self)->tp_free((PyObject *)self);
}
{{/destructor}}


// Actual implementation of the methods
{{#methods}}
static PyObject *sdk_{{class_name}}_{{c_function}}(
  sdk_{{class_name}}_Object* self, PyObject *args)
{
  PythonLock::LogCall("Calling method {{c_function}}() on object of class {{class_name}}");

  if (self->object_ == NULL)
  {
    // TODO: RAISE
    //PythonLock::RaiseException(module, OrthancPluginErrorCode_NullPointer);
    PyErr_SetString(PyExc_ValueError, "Invalid object");
    return NULL;
  }

{{> function_body}}
}

{{/methods}}


static void Register{{class_name}}Class(PyObject* module)
{
  sdk_{{class_name}}_Type.tp_new = PyType_GenericNew;
  sdk_{{class_name}}_Type.tp_flags = Py_TPFLAGS_DEFAULT;
  sdk_{{class_name}}_Type.tp_doc = "Generated from Orthanc C class: {{class_name}}";
  sdk_{{class_name}}_Type.tp_methods = sdk_{{class_name}}_Methods;
  sdk_{{class_name}}_Type.tp_init = (initproc) sdk_{{class_name}}_Constructor;

{{#destructor}}
  /**
   * "tp_dealloc is called when the reference count of the object goes
   * down to zero. This is where you destroy the object and its
   * members. It should then free the memory occupied by the object by
   * calling tp_free."
   * https://stackoverflow.com/a/24863227/881731
   **/
  sdk_{{class_name}}_Type.tp_dealloc = sdk_{{class_name}}_Destructor;
{{/destructor}}
  
  if (PyType_Ready(&sdk_{{class_name}}_Type) < 0)
  {
    OrthancPlugins::LogError("Cannot register Python class: {{class_name}}");
    ORTHANC_PLUGINS_THROW_EXCEPTION(InternalError);
  }

  Py_INCREF(&sdk_{{class_name}}_Type);
  if (PyModule_AddObject(module, "{{short_name}}", (PyObject *)&sdk_{{class_name}}_Type) < 0)
  {
    OrthancPlugins::LogError("Cannot register Python class: {{class_name}}");
    Py_DECREF(&sdk_{{class_name}}_Type);
    ORTHANC_PLUGINS_THROW_EXCEPTION(InternalError);
  }
}


PyObject* Get{{class_name}}Type()
{
  return (PyObject*) &sdk_{{class_name}}_Type;
}
